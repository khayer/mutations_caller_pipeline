#!/usr/bin/env ruby
require 'mutations_caller_pipeline'
require 'optparse'

usage =<<EOF
_________________________________________________________________________________________________

  #{$0} -m mutant_r1.fq -n mutant_r2.fq
        [-w wildtype_r1.fq -x wildtype_r2.fq]
        -i index_prefix -a annotation_file
        -b bwa -s samtools -g GATK
_________________________________________________________________________________________________

  #{$0} ...
  ... is a tool to find mutations between the reference gene and a given test
  population. To run this tool you must have bwa, samtools and GATK installed. Also
  you should have the indices for bwa and GATK prepared.
  NOTE: Only paired end reads are supported!

EOF

options = { :mutant_r1 => nil,
            :mutant_r2 => nil,
            :wildtype_r1 => nil,
            :wildtype_r2 => nil,
            :index_prefix => nil,
            :annotation_file => nil,
            :bwa => nil,
            :samtools => nil,
            :gatk => nil,
            :vcf => nil
          }

optparse = OptionParser.new do |opts|
  opts.banner = usage

  opts.on("-m", "--fwd_read_mutant DIR", :REQUIRED, String, "Path to fwd read of mutant") do |i|
    options[:mutant_r1] = i
  end

  opts.on("-n", "--rev_read_mutant DIR", :REQUIRED, String, "Path to rev read of mutant") do |i|
    options[:mutant_r2] = i
  end

  opts.on("-w", "--fwd_read_wildtype DIR", String, "Path to fwd read of wildtype, not mandatory") do |i|
    options[:wildtype_r1] = i if i
  end

  opts.on("-x", "--rev_read_wildtype DIR", String, "Path to rev read of wildtype, not mandatory") do |i|
    options[:wildtype_r2] = i if i
  end

  opts.on("-d", "--index PREFIX", :REQUIRED, String, "Prefix of species") do |i|
    options[:index_prefix] = i
  end

  opts.on("-a", "--annotation_file", :REQUIRED, String, "Annotation file for species. (e.g. refGene.txt) ") do |i|
    options[:annotation_file] = i
  end

  opts.on("-b","--bwa [PATH]", :REQUIRED, String,  "Path to bwa") do |i|
    options[:bwa] =  i
  end

  opts.on("-s", "--samtools [PATH]", "Path to samtools") do |i|
    options[:samtools] =  i
  end

  opts.on("-g","--gatk [PATH]", "Path to GATK") do |i|
    options[:gatk] = i
  end

  opts.on("-v","--vcf [PATH]", "Output of pipeline") do |i|
    options[:vcf] = i
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end

begin
  optparse.parse!
  mandatory = [:mutant_r1, :mutant_r2, :index_prefix, :annotation_file, :bwa, :samtools, :gatk, :vcf]
  missing = mandatory.select{ |param| options[param].nil? }
  if !missing.empty?
    puts "\nMissing options: #{missing.join(', ')}"
    puts optparse
    exit
  end
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
   puts $!.to_s
   puts optparse
   exit
end

# pipeline starts here

# tmp files for output
random = (rand*1000000).floor.to_s
bam_file = "mutant_#{random}.bam"
log_file = "#{random}.log"

# BWA : First step mapping reads to reference
BwaCaller.call_paired_end(options[:mutant_r1],
                          options[:mutant_r2],
                          bam_file,
                          options[:index_prefix],
                          log_file,
                          options[:bwa],
                          options[:samtools])



if options[:wildtype_r1] && options[:wildtype_r2]
  bam_file_wildtype = "wildtype_#{random}.bam"
  BwaCaller.call_paired_end(options[:wildtype_r1],
                          options[:wildtype_r2],
                          bam_file_wildtype,
                          options[:index_prefix],
                          log_file,
                          options[:bwa],
                          options[:samtools])
end

# Indexing
SamtoolsIndexing.call(bam_file)
if bam_file_wildtype
  SamtoolsIndexing.call(bam_file_wildtype)
end
# GATK: finding mutations
GatkCaller.call(log_file, options[:gatk], options[:index], bam_file, options[:vcf])